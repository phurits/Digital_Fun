////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2013 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.7
//  \   \         Application : sch2hdl
//  /   /         Filename : main.vf
// /___/   /\     Timestamp : 11/22/2021 21:43:33
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: sch2hdl -intstyle ise -family spartan6 -verilog C:/xilinx__workspace/try1/main.vf -w C:/xilinx__workspace/try1/main.sch
//Design Name: main
//Device: spartan6
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale 100 ps / 10 ps

module CD4CE_HXILINX_main(CEO, Q0, Q1, Q2, Q3, TC, C, CE, CLR);
   
   parameter TERMINAL_COUNT = 4'b1001;
   
   output             CEO;
   output             Q0;
   output             Q1;
   output             Q2;
   output             Q3;
   output             TC;

   input 	      C;	
   input 	      CE;	
   input 	      CLR;	
   
   reg                Q0;
   reg                Q1;
   reg                Q2;
   reg                Q3;
   
   always @(posedge C or posedge CLR)
     begin
	if (CLR)
	  {Q3, Q2, Q1, Q0} <= 4'b0000;

	else if (CE)
          begin
             if ({Q3,Q2,Q1,Q0} == 4'b1001)
               {Q3,Q2,Q1,Q0} <= 4'b0000;
             else if({Q3,Q2,Q1,Q0} == 4'b1011)
               {Q3,Q2,Q1,Q0} <= 4'b0110;
             else if({Q3,Q2,Q1,Q0} == 4'b1101)
               {Q3,Q2,Q1,Q0} <= 4'b0100;
             else if({Q3,Q2,Q1,Q0} == 4'b1111)
               {Q3,Q2,Q1,Q0} <= 4'b0010;
            
             else
	      {Q3, Q2, Q1,Q0} <= {Q3, Q2, Q1,Q0} + 1;
          end
     end
   
   assign CEO = TC & CE;
   assign TC = CLR ? 1'b0 : ({Q3, Q2, Q1, Q0} == TERMINAL_COUNT);
   
endmodule
`timescale 100 ps / 10 ps

module FJKC_HXILINX_main(Q, C, CLR, J, K);
   
   output             Q;

   input 	      C;	
   input 	      CLR;	
   input              J;
   input              K;
   
   parameter INIT = 1'b0;
   reg                Q = INIT;


   always @(posedge C or posedge CLR)
     begin
	if (CLR)
	  Q <= 1'b0;
	else
        begin
           if(!J)
           begin
              if(K)
              Q <= 1'b0;
           end
           else
           begin
              if(!K)
              Q <= 1'b1;
              else 
              Q <= !Q;
           end
        end
     end
   
endmodule
`timescale 1ns / 1ps

module ClockDivisor_MUSER_main(CLK, 
                               CLK_1Hz, 
                               CLK_2Hz, 
                               CLK_10Hz, 
                               CLK_100Hz, 
                               CLK_1000Hz);

    input CLK;
   output CLK_1Hz;
   output CLK_2Hz;
   output CLK_10Hz;
   output CLK_100Hz;
   output CLK_1000Hz;
   
   wire XLXN_2;
   wire XLXN_3;
   wire XLXN_4;
   wire XLXN_5;
   wire XLXN_6;
   wire XLXN_7;
   wire XLXN_8;
   wire XLXN_14;
   wire XLXN_15;
   wire XLXN_16;
   wire XLXN_18;
   wire XLXN_19;
   wire XLXN_28;
   wire XLXN_35;
   wire CLK_2Hz_DUMMY;
   
   assign CLK_2Hz = CLK_2Hz_DUMMY;
   (* HU_SET = "XLXI_1_17" *) 
   CD4CE_HXILINX_main  XLXI_1 (.C(CLK), 
                              .CE(XLXN_35), 
                              .CLR(), 
                              .CEO(), 
                              .Q0(), 
                              .Q1(), 
                              .Q2(), 
                              .Q3(), 
                              .TC(XLXN_2));
   (* HU_SET = "XLXI_2_18" *) 
   CD4CE_HXILINX_main  XLXI_2 (.C(XLXN_3), 
                              .CE(XLXN_35), 
                              .CLR(), 
                              .CEO(), 
                              .Q0(), 
                              .Q1(), 
                              .Q2(), 
                              .Q3(), 
                              .TC(XLXN_4));
   (* HU_SET = "XLXI_3_19" *) 
   CD4CE_HXILINX_main  XLXI_3 (.C(XLXN_5), 
                              .CE(XLXN_35), 
                              .CLR(), 
                              .CEO(), 
                              .Q0(), 
                              .Q1(), 
                              .Q2(), 
                              .Q3(), 
                              .TC(XLXN_14));
   (* HU_SET = "XLXI_4_20" *) 
   CD4CE_HXILINX_main  XLXI_4 (.C(XLXN_15), 
                              .CE(XLXN_35), 
                              .CLR(), 
                              .CEO(), 
                              .Q0(), 
                              .Q1(), 
                              .Q2(), 
                              .Q3(), 
                              .TC(XLXN_6));
   (* HU_SET = "XLXI_5_23" *) 
   CD4CE_HXILINX_main  XLXI_5 (.C(XLXN_7), 
                              .CE(XLXN_35), 
                              .CLR(), 
                              .CEO(), 
                              .Q0(), 
                              .Q1(), 
                              .Q2(), 
                              .Q3(), 
                              .TC(XLXN_8));
   (* HU_SET = "XLXI_6_22" *) 
   CD4CE_HXILINX_main  XLXI_6 (.C(XLXN_28), 
                              .CE(XLXN_35), 
                              .CLR(), 
                              .CEO(), 
                              .Q0(), 
                              .Q1(), 
                              .Q2(), 
                              .Q3(), 
                              .TC(XLXN_16));
   (* HU_SET = "XLXI_7_21" *) 
   CD4CE_HXILINX_main  XLXI_7 (.C(XLXN_18), 
                              .CE(XLXN_35), 
                              .CLR(), 
                              .CEO(), 
                              .Q0(), 
                              .Q1(), 
                              .Q2(), 
                              .Q3(), 
                              .TC(XLXN_19));
   INV  XLXI_14 (.I(XLXN_2), 
                .O(XLXN_3));
   INV  XLXI_15 (.I(XLXN_4), 
                .O(XLXN_5));
   INV  XLXI_16 (.I(XLXN_8), 
                .O(XLXN_28));
   INV  XLXI_17 (.I(XLXN_6), 
                .O(XLXN_7));
   INV  XLXI_18 (.I(XLXN_14), 
                .O(XLXN_15));
   INV  XLXI_25 (.I(XLXN_16), 
                .O(XLXN_18));
   INV  XLXI_26 (.I(XLXN_19), 
                .O(CLK_2Hz_DUMMY));
   VCC  XLXI_27 (.P(XLXN_35));
   (* HU_SET = "XLXI_28_24" *) 
   FJKC_HXILINX_main  XLXI_28 (.C(CLK_2Hz_DUMMY), 
                              .CLR(), 
                              .J(XLXN_35), 
                              .K(XLXN_35), 
                              .Q(CLK_1Hz));
   (* HU_SET = "XLXI_29_25" *) 
   FJKC_HXILINX_main  XLXI_29 (.C(XLXN_18), 
                              .CLR(), 
                              .J(XLXN_35), 
                              .K(XLXN_35), 
                              .Q(CLK_10Hz));
   (* HU_SET = "XLXI_30_26" *) 
   FJKC_HXILINX_main  XLXI_30 (.C(XLXN_28), 
                              .CLR(), 
                              .J(XLXN_35), 
                              .K(XLXN_35), 
                              .Q(CLK_100Hz));
   (* HU_SET = "XLXI_31_27" *) 
   FJKC_HXILINX_main  XLXI_31 (.C(XLXN_7), 
                              .CLR(), 
                              .J(XLXN_35), 
                              .K(XLXN_35), 
                              .Q(CLK_1000Hz));
endmodule
`timescale 1ns / 1ps

module betterBCDto7seg_MUSER_main(Inp, 
                                  A7, 
                                  B7, 
                                  C7, 
                                  D7, 
                                  E7, 
                                  F7, 
                                  G7);

    input [3:0] Inp;
   output A7;
   output B7;
   output C7;
   output D7;
   output E7;
   output F7;
   output G7;
   
   wire XLXN_8;
   wire XLXN_9;
   wire XLXN_10;
   wire XLXN_11;
   wire XLXN_13;
   wire XLXN_14;
   wire XLXN_15;
   wire XLXN_16;
   wire XLXN_17;
   wire XLXN_19;
   wire XLXN_21;
   wire XLXN_22;
   wire XLXN_23;
   wire XLXN_24;
   wire XLXN_25;
   wire XLXN_26;
   wire XLXN_27;
   wire XLXN_28;
   wire XLXN_29;
   wire XLXN_30;
   wire XLXN_31;
   wire XLXN_33;
   wire XLXN_34;
   wire XLXN_52;
   wire XLXN_54;
   wire XLXN_55;
   wire XLXN_56;
   wire XLXN_57;
   wire XLXN_58;
   wire XLXN_61;
   wire XLXN_62;
   wire XLXN_64;
   wire XLXN_65;
   wire XLXN_66;
   wire XLXN_68;
   wire XLXN_69;
   wire XLXN_70;
   
   OR4  XLXI_1 (.I0(Inp[3]), 
               .I1(XLXN_11), 
               .I2(Inp[1]), 
               .I3(XLXN_8), 
               .O(A7));
   AND2  XLXI_2 (.I0(XLXN_10), 
                .I1(XLXN_9), 
                .O(XLXN_8));
   INV  XLXI_3 (.I(Inp[2]), 
               .O(XLXN_9));
   INV  XLXI_4 (.I(Inp[0]), 
               .O(XLXN_10));
   OR3  XLXI_5 (.I0(XLXN_17), 
               .I1(XLXN_16), 
               .I2(XLXN_13), 
               .O(B7));
   INV  XLXI_6 (.I(Inp[2]), 
               .O(XLXN_13));
   AND2  XLXI_7 (.I0(XLXN_15), 
                .I1(XLXN_14), 
                .O(XLXN_16));
   INV  XLXI_8 (.I(Inp[1]), 
               .O(XLXN_14));
   INV  XLXI_9 (.I(Inp[0]), 
               .O(XLXN_15));
   AND2  XLXI_10 (.I0(Inp[0]), 
                 .I1(Inp[1]), 
                 .O(XLXN_17));
   OR3  XLXI_11 (.I0(Inp[2]), 
                .I1(Inp[0]), 
                .I2(XLXN_19), 
                .O(C7));
   INV  XLXI_12 (.I(Inp[1]), 
                .O(XLXN_19));
   AND2  XLXI_13 (.I0(XLXN_22), 
                 .I1(XLXN_21), 
                 .O(XLXN_23));
   INV  XLXI_14 (.I(Inp[2]), 
                .O(XLXN_21));
   INV  XLXI_15 (.I(Inp[0]), 
                .O(XLXN_22));
   AND2  XLXI_16 (.I0(Inp[1]), 
                 .I1(XLXN_24), 
                 .O(XLXN_25));
   INV  XLXI_17 (.I(Inp[2]), 
                .O(XLXN_24));
   OR5  XLXI_18 (.I0(Inp[3]), 
                .I1(XLXN_28), 
                .I2(XLXN_27), 
                .I3(XLXN_25), 
                .I4(XLXN_23), 
                .O(D7));
   AND3  XLXI_19 (.I0(Inp[0]), 
                 .I1(XLXN_26), 
                 .I2(Inp[2]), 
                 .O(XLXN_27));
   INV  XLXI_20 (.I(Inp[1]), 
                .O(XLXN_26));
   AND2  XLXI_21 (.I0(XLXN_29), 
                 .I1(Inp[1]), 
                 .O(XLXN_28));
   INV  XLXI_22 (.I(Inp[0]), 
                .O(XLXN_29));
   AND2  XLXI_23 (.I0(XLXN_31), 
                 .I1(XLXN_30), 
                 .O(XLXN_33));
   INV  XLXI_24 (.I(Inp[2]), 
                .O(XLXN_30));
   INV  XLXI_25 (.I(Inp[0]), 
                .O(XLXN_31));
   OR2  XLXI_26 (.I0(XLXN_52), 
                .I1(XLXN_33), 
                .O(E7));
   AND2  XLXI_27 (.I0(XLXN_34), 
                 .I1(Inp[1]), 
                 .O(XLXN_52));
   INV  XLXI_28 (.I(Inp[0]), 
                .O(XLXN_34));
   INV  XLXI_29 (.I(Inp[0]), 
                .O(XLXN_55));
   INV  XLXI_30 (.I(Inp[1]), 
                .O(XLXN_54));
   AND2  XLXI_31 (.I0(XLXN_55), 
                 .I1(XLXN_54), 
                 .O(XLXN_56));
   OR4  XLXI_36 (.I0(Inp[3]), 
                .I1(XLXN_61), 
                .I2(XLXN_62), 
                .I3(XLXN_56), 
                .O(F7));
   INV  XLXI_45 (.I(Inp[1]), 
                .O(XLXN_57));
   AND2  XLXI_46 (.I0(XLXN_57), 
                 .I1(Inp[2]), 
                 .O(XLXN_62));
   INV  XLXI_47 (.I(Inp[0]), 
                .O(XLXN_58));
   AND2  XLXI_48 (.I0(XLXN_58), 
                 .I1(Inp[2]), 
                 .O(XLXN_61));
   OR4  XLXI_49 (.I0(XLXN_70), 
                .I1(Inp[3]), 
                .I2(XLXN_69), 
                .I3(XLXN_68), 
                .O(G7));
   AND2  XLXI_50 (.I0(Inp[1]), 
                 .I1(XLXN_64), 
                 .O(XLXN_68));
   INV  XLXI_51 (.I(Inp[2]), 
                .O(XLXN_64));
   AND2  XLXI_52 (.I0(XLXN_65), 
                 .I1(Inp[2]), 
                 .O(XLXN_69));
   INV  XLXI_53 (.I(Inp[1]), 
                .O(XLXN_65));
   AND2  XLXI_54 (.I0(XLXN_66), 
                 .I1(Inp[2]), 
                 .O(XLXN_70));
   INV  XLXI_55 (.I(Inp[0]), 
                .O(XLXN_66));
   AND2  XLXI_56 (.I0(Inp[0]), 
                 .I1(Inp[2]), 
                 .O(XLXN_11));
endmodule
`timescale 1ns / 1ps

module Counter1_5_MUSER_main(CLK, 
                             Reset, 
                             Q, 
                             TC);

    input CLK;
    input Reset;
   output [3:0] Q;
   output TC;
   
   wire XLXN_39;
   wire XLXN_41;
   wire XLXN_42;
   wire XLXN_44;
   wire [3:0] Q_DUMMY;
   
   assign Q[3:0] = Q_DUMMY[3:0];
   GND  XLXI_17 (.G(Q_DUMMY[3]));
   (* HU_SET = "XLXI_20_28" *) 
   FJKC_HXILINX_main  XLXI_20 (.C(CLK), 
                              .CLR(Reset), 
                              .J(XLXN_39), 
                              .K(XLXN_41), 
                              .Q(Q_DUMMY[0]));
   (* HU_SET = "XLXI_21_29" *) 
   FJKC_HXILINX_main  XLXI_21 (.C(CLK), 
                              .CLR(Reset), 
                              .J(XLXN_42), 
                              .K(Q_DUMMY[0]), 
                              .Q(Q_DUMMY[1]));
   (* HU_SET = "XLXI_22_30" *) 
   FJKC_HXILINX_main  XLXI_22 (.C(CLK), 
                              .CLR(Reset), 
                              .J(XLXN_44), 
                              .K(Q_DUMMY[0]), 
                              .Q(Q_DUMMY[2]));
   VCC  XLXI_23 (.P(XLXN_39));
   INV  XLXI_24 (.I(Q_DUMMY[2]), 
                .O(XLXN_41));
   AND2  XLXI_25 (.I0(XLXN_41), 
                 .I1(Q_DUMMY[0]), 
                 .O(XLXN_42));
   AND2  XLXI_26 (.I0(Q_DUMMY[1]), 
                 .I1(Q_DUMMY[0]), 
                 .O(XLXN_44));
   AND3B1  XLXI_27 (.I0(Q_DUMMY[1]), 
                   .I1(Q_DUMMY[2]), 
                   .I2(Q_DUMMY[0]), 
                   .O(TC));
endmodule
`timescale 1ns / 1ps

module main(CLK, 
            A, 
            B, 
            Buzzer, 
            C, 
            Common0, 
            Common1, 
            Common2, 
            Common3, 
            D, 
            E, 
            F, 
            G);

    input CLK;
   output A;
   output B;
   output Buzzer;
   output C;
   output Common0;
   output Common1;
   output Common2;
   output Common3;
   output D;
   output E;
   output F;
   output G;
   
   wire XLXN_15;
   wire XLXN_22;
   wire [3:0] XLXN_23;
   wire XLXN_33;
   
   Counter1_5_MUSER_main  XLXI_9 (.CLK(XLXN_15), 
                                 .Reset(XLXN_22), 
                                 .Q(XLXN_23[3:0]), 
                                 .TC(Buzzer));
   betterBCDto7seg_MUSER_main  XLXI_10 (.Inp(XLXN_23[3:0]), 
                                       .A7(A), 
                                       .B7(B), 
                                       .C7(C), 
                                       .D7(D), 
                                       .E7(E), 
                                       .F7(F), 
                                       .G7(G));
   GND  XLXI_11 (.G(XLXN_22));
   GND  XLXI_12 (.G(Common0));
   VCC  XLXI_13 (.P(Common1));
   VCC  XLXI_14 (.P(Common2));
   VCC  XLXI_15 (.P(Common3));
   ClockDivisor_MUSER_main  XLXI_16 (.CLK(CLK), 
                                    .CLK_1Hz(XLXN_15), 
                                    .CLK_2Hz(XLXN_33), 
                                    .CLK_10Hz(XLXN_33), 
                                    .CLK_100Hz(XLXN_33), 
                                    .CLK_1000Hz(XLXN_33));
   GND  XLXI_17 (.G(XLXN_33));
endmodule
